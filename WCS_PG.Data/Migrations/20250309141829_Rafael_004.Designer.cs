// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WCS_PG.Data;

#nullable disable

namespace WCS_PG.Data.Migrations
{
    [DbContext(typeof(WCSContext))]
    [Migration("20250309141829_Rafael_004")]
    partial class Rafael_004
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WCS_PG.Data.Models.ClientCustomization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("CustomizationRule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomizationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("ClientCustomizations");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.GroupPermission", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupPermissions", (string)null);
                });

            modelBuilder.Entity("WCS_PG.Data.Models.ManualTriage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DestinationRampId")
                        .HasColumnType("int");

                    b.Property<string>("PickRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("RejectionId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TriagedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TriagedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationRampId");

                    b.HasIndex("PickRequestId");

                    b.HasIndex("RejectionId");

                    b.HasIndex("TriagedByUserId");

                    b.ToTable("ManualTriages");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.OperationalMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageWaveCompletionTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompletedShipments")
                        .HasColumnType("int");

                    b.Property<int>("CompletedWaves")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OperatingHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProcessedBoxes")
                        .HasColumnType("int");

                    b.Property<int>("RejectedBoxes")
                        .HasColumnType("int");

                    b.Property<string>("ShiftId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StoppedHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SystemAvailability")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("OperationalMetrics");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.OperationalMetricsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationalMetricsId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessedBoxes")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductivityRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RejectedBoxes")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StopReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperationalMetricsId");

                    b.ToTable("OperationalMetricsDetail");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.PickRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Customization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("TotalSkus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PickRequests");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.PickRequestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExpectedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("FinalRejectionCount")
                        .HasColumnType("int");

                    b.Property<int?>("InducedQuantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("InductionPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastBoxReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NoReadRejectionCount")
                        .HasColumnType("int");

                    b.Property<int?>("PendingCount")
                        .HasColumnType("int");

                    b.Property<string>("PickRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("ReceiptPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReceivedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PickRequestId");

                    b.ToTable("PickRequestItems");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.ProductionHourly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<decimal>("EfficiencyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Hour")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlannedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProducedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("RejectedQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RejectionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WaveNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductionHourlies");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.ProductionHourlyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EfficiencyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProducedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductionHourlyId")
                        .HasColumnType("int");

                    b.Property<int>("RampId")
                        .HasColumnType("int");

                    b.Property<int>("RejectedQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionHourlyId");

                    b.HasIndex("RampId");

                    b.ToTable("ProductionHourlyDetails");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Ramp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentPickRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RampNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPickRequestId");

                    b.ToTable("Ramps");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.RampAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AllocatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AllocatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("PickRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RampId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleasedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReleasedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AllocatedByUserId");

                    b.HasIndex("PickRequestId");

                    b.HasIndex("RampId");

                    b.HasIndex("ReleasedByUserId");

                    b.ToTable("RampAllocations");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.RampConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutomaticRelease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxWaitTime")
                        .HasColumnType("int");

                    b.Property<int>("MaximumBoxes")
                        .HasColumnType("int");

                    b.Property<int>("RampId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("ValidCustomizations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarningThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RampId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("RampConfigurations");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.RampMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageProcessingTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExcessRejections")
                        .HasColumnType("int");

                    b.Property<int>("FullRampRejections")
                        .HasColumnType("int");

                    b.Property<int>("NoReadRejections")
                        .HasColumnType("int");

                    b.Property<int>("RampId")
                        .HasColumnType("int");

                    b.Property<int>("TotalBoxes")
                        .HasColumnType("int");

                    b.Property<int>("TotalPickRequests")
                        .HasColumnType("int");

                    b.Property<int>("TotalSkus")
                        .HasColumnType("int");

                    b.Property<decimal>("UtilizationRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RampId");

                    b.ToTable("RampMetrics");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Rejection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTreated")
                        .HasColumnType("bit");

                    b.Property<string>("PickRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RampId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PickRequestId");

                    b.HasIndex("RampId");

                    b.HasIndex("TreatedByUserId");

                    b.ToTable("Rejections");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SkuBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FirstUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisteredByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaveNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredByUserId");

                    b.ToTable("SkuBatches");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SkuBatchUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PickRequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RampId")
                        .HasColumnType("int");

                    b.Property<int>("SkuBatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PickRequestId");

                    b.HasIndex("RampId");

                    b.HasIndex("SkuBatchId");

                    b.ToTable("SkuBatchUsages");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SystemAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AcknowledgedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresAcknowledgment")
                        .HasColumnType("bit");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcknowledgedByUserId");

                    b.ToTable("SystemAlerts");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SystemParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("SystemParameters");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Wave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WaveNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Waves");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.WavePickRequest", b =>
                {
                    b.Property<int>("WaveId")
                        .HasColumnType("int");

                    b.Property<string>("PickRequestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("PickRequestId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WaveId", "PickRequestId");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("PickRequestId");

                    b.HasIndex("PickRequestId1");

                    b.ToTable("WavePickRequests");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.ClientCustomization", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.GroupPermission", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.ManualTriage", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.Ramp", "DestinationRamp")
                        .WithMany()
                        .HasForeignKey("DestinationRampId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.PickRequest", "PickRequest")
                        .WithMany()
                        .HasForeignKey("PickRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.Rejection", "Rejection")
                        .WithMany()
                        .HasForeignKey("RejectionId");

                    b.HasOne("WCS_PG.Data.Models.User", "TriagedByUser")
                        .WithMany()
                        .HasForeignKey("TriagedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationRamp");

                    b.Navigation("PickRequest");

                    b.Navigation("Rejection");

                    b.Navigation("TriagedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.OperationalMetricsDetail", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.OperationalMetrics", "OperationalMetrics")
                        .WithMany("Details")
                        .HasForeignKey("OperationalMetricsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationalMetrics");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.PickRequestItem", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.PickRequest", "PickRequest")
                        .WithMany("Items")
                        .HasForeignKey("PickRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickRequest");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.ProductionHourlyDetail", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.ProductionHourly", "ProductionHourly")
                        .WithMany("Details")
                        .HasForeignKey("ProductionHourlyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.Ramp", "Ramp")
                        .WithMany()
                        .HasForeignKey("RampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionHourly");

                    b.Navigation("Ramp");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Ramp", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.PickRequest", "CurrentPickRequest")
                        .WithMany()
                        .HasForeignKey("CurrentPickRequestId");

                    b.Navigation("CurrentPickRequest");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.RampAllocation", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.User", "AllocatedByUser")
                        .WithMany()
                        .HasForeignKey("AllocatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.PickRequest", "PickRequest")
                        .WithMany("RampAllocations")
                        .HasForeignKey("PickRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.Ramp", "Ramp")
                        .WithMany("RampAllocations")
                        .HasForeignKey("RampId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.User", "ReleasedByUser")
                        .WithMany()
                        .HasForeignKey("ReleasedByUserId");

                    b.Navigation("AllocatedByUser");

                    b.Navigation("PickRequest");

                    b.Navigation("Ramp");

                    b.Navigation("ReleasedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.RampConfiguration", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.Ramp", "Ramp")
                        .WithMany()
                        .HasForeignKey("RampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ramp");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.RampMetrics", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.Ramp", "Ramp")
                        .WithMany()
                        .HasForeignKey("RampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ramp");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Rejection", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.PickRequest", "PickRequest")
                        .WithMany()
                        .HasForeignKey("PickRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.Ramp", "Ramp")
                        .WithMany()
                        .HasForeignKey("RampId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.User", "TreatedByUser")
                        .WithMany()
                        .HasForeignKey("TreatedByUserId");

                    b.Navigation("PickRequest");

                    b.Navigation("Ramp");

                    b.Navigation("TreatedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SkuBatch", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.User", "RegisteredByUser")
                        .WithMany()
                        .HasForeignKey("RegisteredByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SkuBatchUsage", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.PickRequest", "PickRequest")
                        .WithMany()
                        .HasForeignKey("PickRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.Ramp", "Ramp")
                        .WithMany()
                        .HasForeignKey("RampId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.SkuBatch", "SkuBatch")
                        .WithMany()
                        .HasForeignKey("SkuBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PickRequest");

                    b.Navigation("Ramp");

                    b.Navigation("SkuBatch");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SystemAlert", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.User", "AcknowledgedByUser")
                        .WithMany()
                        .HasForeignKey("AcknowledgedByUserId");

                    b.Navigation("AcknowledgedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.SystemParameter", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.User", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Wave", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.WavePickRequest", b =>
                {
                    b.HasOne("WCS_PG.Data.Models.User", "AddedByUser")
                        .WithMany()
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.PickRequest", "PickRequest")
                        .WithMany()
                        .HasForeignKey("PickRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WCS_PG.Data.Models.PickRequest", null)
                        .WithMany("WavePickRequests")
                        .HasForeignKey("PickRequestId1");

                    b.HasOne("WCS_PG.Data.Models.Wave", "Wave")
                        .WithMany("WavePickRequests")
                        .HasForeignKey("WaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("PickRequest");

                    b.Navigation("Wave");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.OperationalMetrics", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.PickRequest", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("RampAllocations");

                    b.Navigation("WavePickRequests");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.ProductionHourly", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Ramp", b =>
                {
                    b.Navigation("RampAllocations");
                });

            modelBuilder.Entity("WCS_PG.Data.Models.Wave", b =>
                {
                    b.Navigation("WavePickRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
